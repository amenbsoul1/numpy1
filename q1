import numpy as np
from matplotlib import pyplot as plt
def euler(f, a: float, b: float, initial_cond: float, N=None, h=None):
    if N==None and h==None:
        raise ValueError("not good2")
    elif N!=None and h!=None:
        if h!=(b-a)/N:
            raise ValueError("not good3")
    elif N is None:
        N=(b-a)/h
    else:
        h=(b-a)/N
    t_i=np.zeros(int(N)+1)
    y_i=np.zeros((int(N)+1))
    t_i[0] = a
    y_i[0] = initial_cond
    for i in range(int(N)):
        last_t=t_i[i]
        last_y=y_i[i]
        t_i[i+1]=last_t+h
        y_i[i+1]=last_y+h*f(last_t,last_y)
    return t_i,y_i




def plot_funcs(t, y, y_exact=None):
    plt.figure()  # initialize new figure object
    x=t
    exact=np.zeros(len(t))
    for i in range(len(t)):
        exact[i]=y_exact(t[i])
    z=exact
    plt.plot(x,y,color="green",label="approximate")
    plt.plot(x,z,color="blue",ls='--',label='exact')
    plt.title('Solution with Eules\'s methods')
    plt.xlabel('t')
    plt.ylabel('y')
    plt.legend()
    fig = plt.gcf()  # get current figure, save in variable
    return fig


def plot_error(t, y, y_exact):
    plt.figure()  # initialize new figure object
    exact = np.zeros(len(t))
    for i in range(len(t)):
        exact[i] = y_exact(t[i])
    a=abs(y-exact)
    plt.plot(t,a,color='blue')
    plt.title("hh")
    plt.xlabel('t')
    plt.ylabel('yyy')
    fig = plt.gcf()  # get current figure, save in variable
    return fig
