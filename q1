import numpy as np


def euler(f, a: float, b: float, initial_cond: float, N=None, h=None):
    if N is None and h is None:
        raise ValueError("Either N or h must be provided.")
    elif N is not None and h is not None:
        if h != (b - a) / N:
            raise ValueError("Step size h is inconsistent with the interval [a, b].")
    elif N is None:
        N = int((b - a) / h)
    else:
        h = (b - a) / N

    t_i = np.linspace(a, b, N + 1)
    y_i = np.zeros(N + 1)
    y_i[0] = initial_cond

    for i in range(N):
        last_t = t_i[i]
        last_y = y_i[i]
        t_i[i + 1] = last_t + h
        y_i[i + 1] = last_y + h * f(last_t, last_y)

    return t_i, y_i
